import { isPlainObject, mapValues } from 'lodash-es';

/**
 * Creates an object with the same keys as `object` and values generated by
 * recursively running each own enumerable string keyed property of `object` through
 * `iteratee`.
 *
 * @param {any} object
 * @param {Function} iteratee
 * @param [options]
 * @param {boolean} [options.context] The value of `this` provided for the call to `iteratee`. Default: undefined
 * @param {boolean} [options.iterateCollections] Should the `iteratee` be called for collections. Default: true
 * @param {boolean} [options.iteratePrimitives] Should the `iteratee` be called for primitives. Default: true
 * @param {boolean} [options.includeKeyPath] Should the `iteratee` be called with `keyPath` parameter. Default: true
 */
export function deepMap<T>(
  object: T,
  iteratee: (value: any, object: T) => any,
  options?: { context?: any; iterateCollections?: boolean; iteratePrimitives?: boolean; includeKeyPath: false }
): any;
export function deepMap(
  object: any,
  iteratee: (...args: any[]) => any,
  options?: { context?: any; iterateCollections?: boolean; iteratePrimitives?: boolean; includeKeyPath?: boolean }
): any {
  const { context, iterateCollections = true, iteratePrimitives = true, includeKeyPath = true } = options || {};

  function _mapDeep(value: any, keyPath: string[] | null, mappedValueStack: any[] | null) {
    const invokeIteratee = isPlainObject(value) || Array.isArray(value) ? iterateCollections : iteratePrimitives;
    if (invokeIteratee) {
      value = options?.includeKeyPath === false ? iteratee.call(context, value, object) : iteratee.call(context, value, keyPath, mappedValueStack, object);
    }
    if (isPlainObject(value)) {
      value = mapValues(value, (val: any, key: string) =>
        _mapDeep(val, includeKeyPath ? keyPath?.concat(key) ?? [key] : null, includeKeyPath ? mappedValueStack?.concat(value) ?? [value] : null)
      );
    } else if (Array.isArray(value)) {
      value = value.map((val: any, key: number) =>
        _mapDeep(
          val,
          includeKeyPath ? keyPath?.concat(key.toString()) ?? [key.toString()] : null,
          includeKeyPath ? mappedValueStack?.concat(value) ?? [value] : null
        )
      );
    }
    return value;
  }

  return _mapDeep(object, [], []);
}
